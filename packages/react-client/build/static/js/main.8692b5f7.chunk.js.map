{"version":3,"sources":["config/accessToken.ts","graphql/index.tsx","components/core/nav-bar.tsx","config/config.ts","components/premitive/PayPalAuthButton.tsx","components/premitive/AppAlert.tsx","components/premitive/AppCard.tsx","components/core/Loading.tsx","components/Home.tsx","components/user/Register.tsx","components/premitive/CustomTable.tsx","components/user/Users.tsx","components/user/Login.tsx","components/post/Posts.tsx","components/user/UserProfile.tsx","components/premitive/ErrorPage.tsx","components/products/Products.tsx","components/premitive/PayPalCheckoutButton.tsx","components/premitive/CustomSelectedTable.tsx","components/carts/MyCarts.tsx","components/Routes.tsx","components/App.tsx","components/core/index.tsx","index.tsx"],"names":["appCredential","accessToken","email","role","name","id","hasBusiness","businessUserId","setAppCredential","credential","getAppCredential","CartsDocument","gql","CreateCartDocument","CustomerDetailDocument","CreatePartnerDocument","PartnerDetailDocument","CreatePostDocument","PostsDocument","usePostsQuery","baseOptions","ApolloReactHooks","CreateProductDocument","ProductsDocument","useProductsQuery","LoginDocument","LogoutDocument","RegisterDocument","useRegisterMutation","UsersDocument","Logout","props","logout","client","MenuItem","onClick","a","localStorage","removeItem","resetStore","history","push","NavBar","handleChange","_event","tab","setState","handleMenu","event","anchorEl","currentTarget","handleClose","pathname","location","state","replace","classes","this","open","Boolean","userCredential","getItem","JSON","parse","toString","className","root","AppBar","position","Toolbar","IconButton","edge","menuButton","color","aria-label","to","style","textTransform","Typography","variant","title","Tabs","value","onChange","indicatorColor","scrollButtons","Tab","icon","label","tabItem","Button","aria-controls","aria-haspopup","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","React","Component","withStyles","theme","marginRight","spacing","flexGrow","height","width","backgroundColor","palette","background","primary","toolbar","textColorSecondary","minWidth","process","NODE_ENV","PAYPAL_CLIENT_ID","PAYPAL_SECRET","REDIRECT_URL","PAYPAL_AUTH_URL","PAYPAL_TOKEN_URL","PAYPAL_USER_URL","PAYPAL_SCOPE","BASE_API","PAYPAL_CREDENTIAL","REFRESH_TOKEN_LIFETIME","btoa","paypalConfigOption","url","client_id","scope","responseType","redirect_uri","PayPalAuthButton","getConnected","response_type","payPalLoginUrl","window","href","button","alt","img","src","_theme","borderRadius","useStyles","makeStyles","createStyles","marginTop","AppAlert","useState","setOpen","Collapse","in","Alert","severity","alertType","action","size","fontSize","message","maxWidth","media","float","justifyItems","RenderMedia","isVideo","CardMedia","component","image","AppCard","cartMutation","description","price","imageUrl","checkout","product","setMessage","messageType","setMessageType","addToCart","console","log","variables","partnerId","partner","customerId","productId","data","Card","CardActionArea","CardContent","gutterBottom","FormLabel","CardActions","textDecoration","app","itemAlign","padding","progress","setProgress","useEffect","timer","setInterval","oldProgress","clearInterval","disabled","CircularProgress","circularProgress","postTitle","borderBottom","marginBottom","fontWeight","postQuery","fetchPolicy","productQuery","products","posts","loading","Grid","container","alignItems","item","xs","length","map","key","post","postType","margin","unit","paper","textAlign","text","secondary","headerTitle","boxShadow","radioControl","registerMutation","initialState","password","firstName","lastName","userType","setValue","field","target","getAttribute","newState","Object","create","submit","setUserType","Paper","md","sm","RadioGroup","row","defaultValue","FormControlLabel","control","Radio","checked","labelPlacement","TextField","type","fullWidth","autoFocus","required","justify","CustomTable","columns","onAdd","onRowDelete","editable","onRowAdd","table","userList","users","user","getUsers","setUsers","newData","Promise","resolve","setTimeout","onRowUpdate","_newData","_oldData","oldData","filter","parsedData","queryString","search","loginMutation","response","login","setItem","stringify","error","lookup","initialEditValue","postList","createdAt","videoUrl","userName","getPosts","setPosts","postMutation","userId","createPost","indexOf","getToken","UserInfo","CustomerProfile","customer","BusinessProfile","emails","verifiedAccount","partnerMutation","payerId","clientId","alertMessage","setAlertMessage","reqData","code","options","method","headers","qs","axios","getAccessToken","userOptions","access_token","getUserData","user_id","payer_id","verified_account","e","concat","userData","createPartner","newCredential","ErrorPage","errorMessage","productList","businessName","getProducts","setProducts","productMutation","parseFloat","createProduct","PayPalCheckoutButton","amount","paypalOptions","buttonStyles","layout","shape","onApprove","_data","_authId","onPaymentStart","onPaymentSuccess","_response","onPaymentError","msg","alert","onPaymentCancel","CustomSelectedTable","rows","intent","total","cart","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","i","colSpan","carts","Routes","exact","path","Home","Login","Register","User","Posts","Products","MyCarts","UserProfile","App","render","createMuiTheme","main","red","A400","default","dotenv","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","then","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","$appRoot","document","querySelector","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","jwtDecode","Date","now","fetchAccessToken","fetch","credentials","handleFetch","handleError","err","warn","onError","errors","graphQLErrors","networkError","undefined","redirectUrl","HttpLink","uri","ReactDOM","ThemeProvider"],"mappings":"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","file":"static/js/main.8692b5f7.chunk.js","sourcesContent":["export interface AppCredential {\r\n  accessToken: string\r\n  email: string\r\n  role: string\r\n  name: string\r\n  id: string\r\n  businessUserId: string // app partner id\r\n  hasBusiness: boolean\r\n}\r\nlet appCredential: AppCredential = {\r\n  accessToken: '',\r\n  email: '',\r\n  role: '',\r\n  name: '',\r\n  id: '',\r\n  hasBusiness: false,\r\n  businessUserId:''\r\n}\r\n\r\nexport const setAppCredential = (credential: AppCredential) => {\r\n  appCredential = credential\r\n}\r\n\r\nexport const getAppCredential = () => {\r\n  return appCredential\r\n}\r\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\n/** The Cart model */\nexport type Cart = {\n   __typename?: 'Cart';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  price: Scalars['Float'];\n  description: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  partnerId: Scalars['String'];\n  partner: Partner;\n  customerId: Scalars['String'];\n  customer: Customer;\n  productId: Scalars['String'];\n  product: Product;\n};\n\n/** The Partner model */\nexport type Customer = {\n   __typename?: 'Customer';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  emails: Scalars['String'];\n  customerId: Scalars['String'];\n  payerId: Scalars['String'];\n  verifiedAccount: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  userId: Scalars['String'];\n  user: User;\n};\n\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse';\n  id: Scalars['String'];\n  email: Scalars['String'];\n  role: Scalars['String'];\n  accessToken: Scalars['String'];\n  name: Scalars['String'];\n  businessUserId: Scalars['String'];\n  hasBusiness: Scalars['Boolean'];\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  revokeRefreshToken: Scalars['Boolean'];\n  register: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  createPost: Post;\n  deletePost: Scalars['Boolean'];\n  login?: Maybe<LoginResponse>;\n  logout: Scalars['Boolean'];\n  createPartner: Partner;\n  deletePartner: Scalars['Boolean'];\n  createCustomer: Customer;\n  deleteCustomer: Scalars['Boolean'];\n  createProduct: Product;\n  deleteProduct: Scalars['Boolean'];\n  createOrder: Order;\n  deleteOrder: Scalars['Boolean'];\n  createCart: Cart;\n  deleteCart: Scalars['Boolean'];\n};\n\n\nexport type MutationRevokeRefreshTokenArgs = {\n  userId: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  userType: Scalars['String'];\n  lastName: Scalars['String'];\n  firstName: Scalars['String'];\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  videoUrl: Scalars['String'];\n  description: Scalars['String'];\n  title: Scalars['String'];\n  postType: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationCreatePartnerArgs = {\n  verifiedAccount: Scalars['String'];\n  clientId: Scalars['String'];\n  payerId: Scalars['String'];\n  partnerId: Scalars['String'];\n  emails: Scalars['String'];\n  name: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationDeletePartnerArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateCustomerArgs = {\n  verifiedAccount: Scalars['String'];\n  payerId: Scalars['String'];\n  customerId: Scalars['String'];\n  emails: Scalars['String'];\n  name: Scalars['String'];\n  userId: Scalars['String'];\n};\n\n\nexport type MutationDeleteCustomerArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateProductArgs = {\n  description: Scalars['String'];\n  price: Scalars['Float'];\n  name: Scalars['String'];\n  partnerId: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateOrderArgs = {\n  description: Scalars['String'];\n  price: Scalars['Float'];\n  name: Scalars['String'];\n  productId: Scalars['String'];\n  customerId: Scalars['String'];\n  partnerId: Scalars['String'];\n};\n\n\nexport type MutationDeleteOrderArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateCartArgs = {\n  description: Scalars['String'];\n  price: Scalars['Float'];\n  name: Scalars['String'];\n  productId: Scalars['String'];\n  customerId: Scalars['String'];\n  partnerId: Scalars['String'];\n};\n\n\nexport type MutationDeleteCartArgs = {\n  id: Scalars['String'];\n};\n\n/** The Partner model */\nexport type Order = {\n   __typename?: 'Order';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  price: Scalars['Float'];\n  description: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  partnerId: Scalars['String'];\n  partner: Partner;\n  customerId: Scalars['String'];\n  customer: Customer;\n  productId: Scalars['String'];\n  product: Product;\n};\n\n/** The Partner model */\nexport type Partner = {\n   __typename?: 'Partner';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  emails: Scalars['String'];\n  partnerId: Scalars['String'];\n  payerId: Scalars['String'];\n  clientId: Scalars['String'];\n  verifiedAccount: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  userId: Scalars['String'];\n  user: User;\n};\n\n/** The Users model */\nexport type Post = {\n   __typename?: 'Post';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  postType: Scalars['String'];\n  description: Scalars['String'];\n  videoUrl: Scalars['String'];\n  published: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  userId: Scalars['String'];\n  user: User;\n};\n\n/** The Partner model */\nexport type Product = {\n   __typename?: 'Product';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  price: Scalars['Float'];\n  description: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  partnerId: Scalars['String'];\n  partner: Partner;\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  user: User;\n  users: Array<User>;\n  post: Post;\n  posts: Array<Post>;\n  partner: Partner;\n  partners: Array<Partner>;\n  customer: Customer;\n  customers: Array<Customer>;\n  product: Product;\n  products: Array<Product>;\n  order: Order;\n  orders: Array<Order>;\n  cart: Cart;\n  carts: Array<Cart>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPartnerArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryCustomerArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryCartArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryCartsArgs = {\n  customerId: Scalars['String'];\n};\n\n/** The Users model */\nexport type User = {\n   __typename?: 'User';\n  id: Scalars['ID'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  name: Scalars['String'];\n};\n\nexport type CartsQueryVariables = {\n  customerId: Scalars['String'];\n};\n\n\nexport type CartsQuery = (\n  { __typename?: 'Query' }\n  & { carts: Array<(\n    { __typename?: 'Cart' }\n    & Pick<Cart, 'id' | 'name' | 'price' | 'description' | 'createdAt'>\n    & { partner: (\n      { __typename?: 'Partner' }\n      & Pick<Partner, 'id' | 'clientId' | 'name'>\n    ), customer: (\n      { __typename?: 'Customer' }\n      & Pick<Customer, 'id' | 'name'>\n    ), product: (\n      { __typename?: 'Product' }\n      & Pick<Product, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type CreateCartMutationVariables = {\n  partnerId: Scalars['String'];\n  customerId: Scalars['String'];\n  productId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['Float'];\n  description: Scalars['String'];\n};\n\n\nexport type CreateCartMutation = (\n  { __typename?: 'Mutation' }\n  & { createCart: (\n    { __typename?: 'Cart' }\n    & Pick<Cart, 'id' | 'name' | 'price' | 'description' | 'createdAt'>\n    & { partner: (\n      { __typename?: 'Partner' }\n      & Pick<Partner, 'id' | 'clientId' | 'name'>\n    ), customer: (\n      { __typename?: 'Customer' }\n      & Pick<Customer, 'id' | 'name'>\n    ), product: (\n      { __typename?: 'Product' }\n      & Pick<Product, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type CreateCustomerMutationVariables = {\n  userId: Scalars['String'];\n  name: Scalars['String'];\n  emails: Scalars['String'];\n  customerId: Scalars['String'];\n  payerId: Scalars['String'];\n  clientId: Scalars['String'];\n  verifiedAccount: Scalars['String'];\n};\n\n\nexport type CreateCustomerMutation = (\n  { __typename?: 'Mutation' }\n  & { createCustomer: (\n    { __typename?: 'Customer' }\n    & Pick<Customer, 'id' | 'name' | 'emails' | 'customerId' | 'createdAt' | 'payerId' | 'verifiedAccount'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  ) }\n);\n\nexport type CustomerDetailQueryVariables = {\n  id: Scalars['String'];\n};\n\n\nexport type CustomerDetailQuery = (\n  { __typename?: 'Query' }\n  & { customer: (\n    { __typename?: 'Customer' }\n    & Pick<Customer, 'id' | 'name' | 'emails' | 'customerId' | 'createdAt' | 'payerId' | 'verifiedAccount'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  ) }\n);\n\nexport type CustomersQueryVariables = {};\n\n\nexport type CustomersQuery = (\n  { __typename?: 'Query' }\n  & { customers: Array<(\n    { __typename?: 'Customer' }\n    & Pick<Customer, 'id' | 'name' | 'emails' | 'customerId' | 'createdAt' | 'payerId' | 'verifiedAccount'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  )> }\n);\n\nexport type CreateOrderMutationVariables = {\n  partnerId: Scalars['String'];\n  customerId: Scalars['String'];\n  productId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['Float'];\n  description: Scalars['String'];\n};\n\n\nexport type CreateOrderMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrder: (\n    { __typename?: 'Order' }\n    & Pick<Order, 'id' | 'name' | 'price' | 'description' | 'createdAt'>\n    & { partner: (\n      { __typename?: 'Partner' }\n      & Pick<Partner, 'id' | 'clientId' | 'name'>\n    ), customer: (\n      { __typename?: 'Customer' }\n      & Pick<Customer, 'id' | 'name'>\n    ), product: (\n      { __typename?: 'Product' }\n      & Pick<Product, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type OrdersQueryVariables = {};\n\n\nexport type OrdersQuery = (\n  { __typename?: 'Query' }\n  & { orders: Array<(\n    { __typename?: 'Order' }\n    & Pick<Order, 'id' | 'name' | 'price' | 'description' | 'createdAt'>\n    & { partner: (\n      { __typename?: 'Partner' }\n      & Pick<Partner, 'id' | 'clientId' | 'name'>\n    ), customer: (\n      { __typename?: 'Customer' }\n      & Pick<Customer, 'id' | 'name'>\n    ), product: (\n      { __typename?: 'Product' }\n      & Pick<Product, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type CreatePartnerMutationVariables = {\n  userId: Scalars['String'];\n  name: Scalars['String'];\n  emails: Scalars['String'];\n  partnerId: Scalars['String'];\n  payerId: Scalars['String'];\n  clientId: Scalars['String'];\n  verifiedAccount: Scalars['String'];\n};\n\n\nexport type CreatePartnerMutation = (\n  { __typename?: 'Mutation' }\n  & { createPartner: (\n    { __typename?: 'Partner' }\n    & Pick<Partner, 'id' | 'name' | 'emails' | 'partnerId' | 'createdAt' | 'payerId' | 'clientId' | 'verifiedAccount'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  ) }\n);\n\nexport type PartnerDetailQueryVariables = {\n  id: Scalars['String'];\n};\n\n\nexport type PartnerDetailQuery = (\n  { __typename?: 'Query' }\n  & { partner: (\n    { __typename?: 'Partner' }\n    & Pick<Partner, 'id' | 'name' | 'emails' | 'partnerId' | 'createdAt' | 'payerId' | 'clientId' | 'verifiedAccount'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  ) }\n);\n\nexport type PartnerQueryVariables = {};\n\n\nexport type PartnerQuery = (\n  { __typename?: 'Query' }\n  & { partners: Array<(\n    { __typename?: 'Partner' }\n    & Pick<Partner, 'id' | 'name' | 'emails' | 'partnerId' | 'createdAt' | 'payerId' | 'clientId' | 'verifiedAccount'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  )> }\n);\n\nexport type CreatePostMutationVariables = {\n  userId: Scalars['String'];\n  postType: Scalars['String'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  videoUrl: Scalars['String'];\n};\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'postType' | 'description' | 'createdAt' | 'videoUrl'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  ) }\n);\n\nexport type PostsQueryVariables = {};\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: Array<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'postType' | 'description' | 'createdAt' | 'videoUrl'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'email' | 'name'>\n    ) }\n  )> }\n);\n\nexport type CreateProductMutationVariables = {\n  partnerId: Scalars['String'];\n  name: Scalars['String'];\n  price: Scalars['Float'];\n  description: Scalars['String'];\n};\n\n\nexport type CreateProductMutation = (\n  { __typename?: 'Mutation' }\n  & { createProduct: (\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'name' | 'price' | 'description' | 'createdAt'>\n    & { partner: (\n      { __typename?: 'Partner' }\n      & Pick<Partner, 'id' | 'clientId' | 'name'>\n    ) }\n  ) }\n);\n\nexport type ProductsQueryVariables = {};\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { products: Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'name' | 'price' | 'description' | 'createdAt'>\n    & { partner: (\n      { __typename?: 'Partner' }\n      & Pick<Partner, 'id' | 'clientId' | 'name'>\n    ) }\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'id' | 'email' | 'role' | 'accessToken' | 'name' | 'hasBusiness' | 'businessUserId'>\n  )> }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  userType: Scalars['String'];\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'name' | 'firstName' | 'lastName'>\n  )> }\n);\n\n\nexport const CartsDocument = gql`\n    query Carts($customerId: String!) {\n  carts(customerId: $customerId) {\n    id\n    name\n    price\n    description\n    createdAt\n    partner {\n      id\n      clientId\n      name\n    }\n    customer {\n      id\n      name\n    }\n    product {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useCartsQuery__\n *\n * To run a query within a React component, call `useCartsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCartsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCartsQuery({\n *   variables: {\n *      customerId: // value for 'customerId'\n *   },\n * });\n */\nexport function useCartsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CartsQuery, CartsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CartsQuery, CartsQueryVariables>(CartsDocument, baseOptions);\n      }\nexport function useCartsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CartsQuery, CartsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CartsQuery, CartsQueryVariables>(CartsDocument, baseOptions);\n        }\nexport type CartsQueryHookResult = ReturnType<typeof useCartsQuery>;\nexport type CartsLazyQueryHookResult = ReturnType<typeof useCartsLazyQuery>;\nexport type CartsQueryResult = ApolloReactCommon.QueryResult<CartsQuery, CartsQueryVariables>;\nexport const CreateCartDocument = gql`\n    mutation CreateCart($partnerId: String!, $customerId: String!, $productId: String!, $name: String!, $price: Float!, $description: String!) {\n  createCart(partnerId: $partnerId, customerId: $customerId, productId: $productId, name: $name, price: $price, description: $description) {\n    id\n    name\n    price\n    description\n    createdAt\n    partner {\n      id\n      clientId\n      name\n    }\n    customer {\n      id\n      name\n    }\n    product {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type CreateCartMutationFn = ApolloReactCommon.MutationFunction<CreateCartMutation, CreateCartMutationVariables>;\n\n/**\n * __useCreateCartMutation__\n *\n * To run a mutation, you first call `useCreateCartMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCartMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCartMutation, { data, loading, error }] = useCreateCartMutation({\n *   variables: {\n *      partnerId: // value for 'partnerId'\n *      customerId: // value for 'customerId'\n *      productId: // value for 'productId'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateCartMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateCartMutation, CreateCartMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateCartMutation, CreateCartMutationVariables>(CreateCartDocument, baseOptions);\n      }\nexport type CreateCartMutationHookResult = ReturnType<typeof useCreateCartMutation>;\nexport type CreateCartMutationResult = ApolloReactCommon.MutationResult<CreateCartMutation>;\nexport type CreateCartMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateCartMutation, CreateCartMutationVariables>;\nexport const CreateCustomerDocument = gql`\n    mutation CreateCustomer($userId: String!, $name: String!, $emails: String!, $customerId: String!, $payerId: String!, $clientId: String!, $verifiedAccount: String!) {\n  createCustomer(userId: $userId, name: $name, emails: $emails, customerId: $customerId, payerId: $payerId, verifiedAccount: $verifiedAccount) {\n    id\n    name\n    emails\n    customerId\n    createdAt\n    payerId\n    verifiedAccount\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\nexport type CreateCustomerMutationFn = ApolloReactCommon.MutationFunction<CreateCustomerMutation, CreateCustomerMutationVariables>;\n\n/**\n * __useCreateCustomerMutation__\n *\n * To run a mutation, you first call `useCreateCustomerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCustomerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCustomerMutation, { data, loading, error }] = useCreateCustomerMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      name: // value for 'name'\n *      emails: // value for 'emails'\n *      customerId: // value for 'customerId'\n *      payerId: // value for 'payerId'\n *      clientId: // value for 'clientId'\n *      verifiedAccount: // value for 'verifiedAccount'\n *   },\n * });\n */\nexport function useCreateCustomerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateCustomerMutation, CreateCustomerMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateCustomerMutation, CreateCustomerMutationVariables>(CreateCustomerDocument, baseOptions);\n      }\nexport type CreateCustomerMutationHookResult = ReturnType<typeof useCreateCustomerMutation>;\nexport type CreateCustomerMutationResult = ApolloReactCommon.MutationResult<CreateCustomerMutation>;\nexport type CreateCustomerMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateCustomerMutation, CreateCustomerMutationVariables>;\nexport const CustomerDetailDocument = gql`\n    query CustomerDetail($id: String!) {\n  customer(id: $id) {\n    id\n    name\n    emails\n    customerId\n    createdAt\n    payerId\n    verifiedAccount\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useCustomerDetailQuery__\n *\n * To run a query within a React component, call `useCustomerDetailQuery` and pass it any options that fit your needs.\n * When your component renders, `useCustomerDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCustomerDetailQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCustomerDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CustomerDetailQuery, CustomerDetailQueryVariables>) {\n        return ApolloReactHooks.useQuery<CustomerDetailQuery, CustomerDetailQueryVariables>(CustomerDetailDocument, baseOptions);\n      }\nexport function useCustomerDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CustomerDetailQuery, CustomerDetailQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CustomerDetailQuery, CustomerDetailQueryVariables>(CustomerDetailDocument, baseOptions);\n        }\nexport type CustomerDetailQueryHookResult = ReturnType<typeof useCustomerDetailQuery>;\nexport type CustomerDetailLazyQueryHookResult = ReturnType<typeof useCustomerDetailLazyQuery>;\nexport type CustomerDetailQueryResult = ApolloReactCommon.QueryResult<CustomerDetailQuery, CustomerDetailQueryVariables>;\nexport const CustomersDocument = gql`\n    query Customers {\n  customers {\n    id\n    name\n    emails\n    customerId\n    createdAt\n    payerId\n    verifiedAccount\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useCustomersQuery__\n *\n * To run a query within a React component, call `useCustomersQuery` and pass it any options that fit your needs.\n * When your component renders, `useCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCustomersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCustomersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CustomersQuery, CustomersQueryVariables>) {\n        return ApolloReactHooks.useQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, baseOptions);\n      }\nexport function useCustomersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CustomersQuery, CustomersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, baseOptions);\n        }\nexport type CustomersQueryHookResult = ReturnType<typeof useCustomersQuery>;\nexport type CustomersLazyQueryHookResult = ReturnType<typeof useCustomersLazyQuery>;\nexport type CustomersQueryResult = ApolloReactCommon.QueryResult<CustomersQuery, CustomersQueryVariables>;\nexport const CreateOrderDocument = gql`\n    mutation CreateOrder($partnerId: String!, $customerId: String!, $productId: String!, $name: String!, $price: Float!, $description: String!) {\n  createOrder(partnerId: $partnerId, customerId: $customerId, productId: $productId, name: $name, price: $price, description: $description) {\n    id\n    name\n    price\n    description\n    createdAt\n    partner {\n      id\n      clientId\n      name\n    }\n    customer {\n      id\n      name\n    }\n    product {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type CreateOrderMutationFn = ApolloReactCommon.MutationFunction<CreateOrderMutation, CreateOrderMutationVariables>;\n\n/**\n * __useCreateOrderMutation__\n *\n * To run a mutation, you first call `useCreateOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createOrderMutation, { data, loading, error }] = useCreateOrderMutation({\n *   variables: {\n *      partnerId: // value for 'partnerId'\n *      customerId: // value for 'customerId'\n *      productId: // value for 'productId'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateOrderMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateOrderMutation, CreateOrderMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateOrderMutation, CreateOrderMutationVariables>(CreateOrderDocument, baseOptions);\n      }\nexport type CreateOrderMutationHookResult = ReturnType<typeof useCreateOrderMutation>;\nexport type CreateOrderMutationResult = ApolloReactCommon.MutationResult<CreateOrderMutation>;\nexport type CreateOrderMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateOrderMutation, CreateOrderMutationVariables>;\nexport const OrdersDocument = gql`\n    query Orders {\n  orders {\n    id\n    name\n    price\n    description\n    createdAt\n    partner {\n      id\n      clientId\n      name\n    }\n    customer {\n      id\n      name\n    }\n    product {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useOrdersQuery__\n *\n * To run a query within a React component, call `useOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useOrdersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<OrdersQuery, OrdersQueryVariables>) {\n        return ApolloReactHooks.useQuery<OrdersQuery, OrdersQueryVariables>(OrdersDocument, baseOptions);\n      }\nexport function useOrdersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<OrdersQuery, OrdersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<OrdersQuery, OrdersQueryVariables>(OrdersDocument, baseOptions);\n        }\nexport type OrdersQueryHookResult = ReturnType<typeof useOrdersQuery>;\nexport type OrdersLazyQueryHookResult = ReturnType<typeof useOrdersLazyQuery>;\nexport type OrdersQueryResult = ApolloReactCommon.QueryResult<OrdersQuery, OrdersQueryVariables>;\nexport const CreatePartnerDocument = gql`\n    mutation CreatePartner($userId: String!, $name: String!, $emails: String!, $partnerId: String!, $payerId: String!, $clientId: String!, $verifiedAccount: String!) {\n  createPartner(userId: $userId, name: $name, emails: $emails, partnerId: $partnerId, payerId: $payerId, clientId: $clientId, verifiedAccount: $verifiedAccount) {\n    id\n    name\n    emails\n    partnerId\n    createdAt\n    payerId\n    clientId\n    verifiedAccount\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\nexport type CreatePartnerMutationFn = ApolloReactCommon.MutationFunction<CreatePartnerMutation, CreatePartnerMutationVariables>;\n\n/**\n * __useCreatePartnerMutation__\n *\n * To run a mutation, you first call `useCreatePartnerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePartnerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPartnerMutation, { data, loading, error }] = useCreatePartnerMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      name: // value for 'name'\n *      emails: // value for 'emails'\n *      partnerId: // value for 'partnerId'\n *      payerId: // value for 'payerId'\n *      clientId: // value for 'clientId'\n *      verifiedAccount: // value for 'verifiedAccount'\n *   },\n * });\n */\nexport function useCreatePartnerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePartnerMutation, CreatePartnerMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePartnerMutation, CreatePartnerMutationVariables>(CreatePartnerDocument, baseOptions);\n      }\nexport type CreatePartnerMutationHookResult = ReturnType<typeof useCreatePartnerMutation>;\nexport type CreatePartnerMutationResult = ApolloReactCommon.MutationResult<CreatePartnerMutation>;\nexport type CreatePartnerMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePartnerMutation, CreatePartnerMutationVariables>;\nexport const PartnerDetailDocument = gql`\n    query PartnerDetail($id: String!) {\n  partner(id: $id) {\n    id\n    name\n    emails\n    partnerId\n    createdAt\n    payerId\n    clientId\n    verifiedAccount\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __usePartnerDetailQuery__\n *\n * To run a query within a React component, call `usePartnerDetailQuery` and pass it any options that fit your needs.\n * When your component renders, `usePartnerDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePartnerDetailQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePartnerDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PartnerDetailQuery, PartnerDetailQueryVariables>) {\n        return ApolloReactHooks.useQuery<PartnerDetailQuery, PartnerDetailQueryVariables>(PartnerDetailDocument, baseOptions);\n      }\nexport function usePartnerDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PartnerDetailQuery, PartnerDetailQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PartnerDetailQuery, PartnerDetailQueryVariables>(PartnerDetailDocument, baseOptions);\n        }\nexport type PartnerDetailQueryHookResult = ReturnType<typeof usePartnerDetailQuery>;\nexport type PartnerDetailLazyQueryHookResult = ReturnType<typeof usePartnerDetailLazyQuery>;\nexport type PartnerDetailQueryResult = ApolloReactCommon.QueryResult<PartnerDetailQuery, PartnerDetailQueryVariables>;\nexport const PartnerDocument = gql`\n    query Partner {\n  partners {\n    id\n    name\n    emails\n    partnerId\n    createdAt\n    payerId\n    clientId\n    verifiedAccount\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __usePartnerQuery__\n *\n * To run a query within a React component, call `usePartnerQuery` and pass it any options that fit your needs.\n * When your component renders, `usePartnerQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePartnerQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePartnerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PartnerQuery, PartnerQueryVariables>) {\n        return ApolloReactHooks.useQuery<PartnerQuery, PartnerQueryVariables>(PartnerDocument, baseOptions);\n      }\nexport function usePartnerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PartnerQuery, PartnerQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PartnerQuery, PartnerQueryVariables>(PartnerDocument, baseOptions);\n        }\nexport type PartnerQueryHookResult = ReturnType<typeof usePartnerQuery>;\nexport type PartnerLazyQueryHookResult = ReturnType<typeof usePartnerLazyQuery>;\nexport type PartnerQueryResult = ApolloReactCommon.QueryResult<PartnerQuery, PartnerQueryVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($userId: String!, $postType: String!, $title: String!, $description: String!, $videoUrl: String!) {\n  createPost(userId: $userId, postType: $postType, title: $title, description: $description, videoUrl: $videoUrl) {\n    id\n    title\n    postType\n    description\n    createdAt\n    videoUrl\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\nexport type CreatePostMutationFn = ApolloReactCommon.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *      postType: // value for 'postType'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      videoUrl: // value for 'videoUrl'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = ApolloReactCommon.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    id\n    title\n    postType\n    description\n    createdAt\n    videoUrl\n    user {\n      email\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return ApolloReactHooks.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = ApolloReactCommon.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const CreateProductDocument = gql`\n    mutation CreateProduct($partnerId: String!, $name: String!, $price: Float!, $description: String!) {\n  createProduct(partnerId: $partnerId, name: $name, price: $price, description: $description) {\n    id\n    name\n    price\n    description\n    createdAt\n    partner {\n      id\n      clientId\n      name\n    }\n  }\n}\n    `;\nexport type CreateProductMutationFn = ApolloReactCommon.MutationFunction<CreateProductMutation, CreateProductMutationVariables>;\n\n/**\n * __useCreateProductMutation__\n *\n * To run a mutation, you first call `useCreateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProductMutation, { data, loading, error }] = useCreateProductMutation({\n *   variables: {\n *      partnerId: // value for 'partnerId'\n *      name: // value for 'name'\n *      price: // value for 'price'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateProductMutation, CreateProductMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateProductMutation, CreateProductMutationVariables>(CreateProductDocument, baseOptions);\n      }\nexport type CreateProductMutationHookResult = ReturnType<typeof useCreateProductMutation>;\nexport type CreateProductMutationResult = ApolloReactCommon.MutationResult<CreateProductMutation>;\nexport type CreateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateProductMutation, CreateProductMutationVariables>;\nexport const ProductsDocument = gql`\n    query Products {\n  products {\n    id\n    name\n    price\n    description\n    createdAt\n    partner {\n      id\n      clientId\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n      }\nexport function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n        }\nexport type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;\nexport type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;\nexport type ProductsQueryResult = ApolloReactCommon.QueryResult<ProductsQuery, ProductsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    id\n    email\n    role\n    accessToken\n    name\n    hasBusiness\n    businessUserId\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $firstName: String!, $lastName: String!, $userType: String!) {\n  register(email: $email, password: $password, firstName: $firstName, lastName: $lastName, userType: $userType)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      userType: // value for 'userType'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n    name\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;","import React from 'react'\r\nimport { withStyles, WithStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\nimport { RouteComponentProps, Link } from 'react-router-dom'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { getAppCredential, setAppCredential } from '../../config/accessToken'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport { useLogoutMutation } from '../../graphql'\r\n\r\nconst Logout: React.FC<RouteComponentProps> = (props) => {\r\n  const [logout, {client}] = useLogoutMutation()\r\n  return (\r\n      <MenuItem\r\n          onClick={async () => {\r\n            await logout()\r\n            setAppCredential({\r\n              id: '',\r\n              accessToken: '',\r\n              email: '',\r\n              role: '',\r\n              name: '',\r\n              businessUserId: '',\r\n              hasBusiness: false,\r\n            })\r\n            localStorage.removeItem('user')\r\n            client?.resetStore()\r\n            props.history.push('/login')\r\n          }}\r\n      >\r\n        Logout\r\n      </MenuItem>\r\n  )\r\n}\r\n\r\nconst styles = (theme: any) => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(0),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    height: 35\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    width: '100%',\r\n    backgroundColor: theme.palette.background.primary,\r\n  },\r\n  toolbar: {\r\n    background: theme.palette.background.primary,\r\n  },\r\n  textColorSecondary: {\r\n    color: 'white',\r\n  },\r\n  tabItem: {\r\n    width: '80px',\r\n    minWidth: theme.spacing(0),\r\n    textTransform: 'none',\r\n    color: 'white',\r\n  },\r\n})\r\ntype Props = WithStyles & RouteComponentProps\r\ninterface State {\r\n  tab: string\r\n  anchorEl: any\r\n}\r\nclass NavBar extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props)\r\n    const {location}= props\r\n    const {pathname}= location\r\n    this.state = {\r\n      tab: (pathname==='/')?'':pathname.replace('/',''),\r\n      anchorEl: null,\r\n    }\r\n  }\r\n\r\n  handleChange = (_event: any, tab: any) => {\r\n    this.setState({ tab })\r\n    switch (tab) {\r\n      case 'users':\r\n        this.props.history.push('/users')\r\n        break\r\n      case 'posts':\r\n        this.props.history.push('/posts')\r\n        break\r\n      case 'products':\r\n        this.props.history.push('/products')\r\n        break\r\n      case 'carts':\r\n        this.props.history.push('/my-carts')\r\n        break\r\n      default:\r\n        this.props.history.push('/')\r\n        break\r\n    }\r\n  }\r\n\r\n  handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n    })\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      anchorEl: null,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props\r\n    const { tab, anchorEl } = this.state\r\n    const open = Boolean(anchorEl)\r\n    // @ts-ignore\r\n    let userCredential= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()): getAppCredential()\r\n    const { email, name } = userCredential\r\n    return (\r\n        <div className={classes.root}>\r\n          <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n              {userCredential.role==='CustomerUser' &&\r\n              <>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"menu\"\r\n                    onClick={()=>this.setState({tab:''},()=>this.props.history.push('/'))}\r\n                >\r\n                  {name && <HomeIcon/>}\r\n                </IconButton>\r\n                <Link to=\"/my-carts\" style={{ textTransform: 'none' }}>\r\n                  My Carts\r\n                </Link>\r\n              </>}\r\n\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                {(userCredential.role==='AdminUser' || userCredential.role==='BusinessUser') && (\r\n                    <>\r\n                      <Tabs\r\n                          value={tab}\r\n                          onChange={this.handleChange}\r\n                          indicatorColor=\"secondary\"\r\n                          variant=\"scrollable\"\r\n                          scrollButtons=\"auto\"\r\n                      >\r\n                        <Tab\r\n                            icon={<HomeIcon/>}\r\n                            label=\"\"\r\n                            value=\"\"\r\n                            className={classes.tabItem}\r\n                        />\r\n                        {userCredential.role==='AdminUser' && <Tab\r\n                            label=\"Users\"\r\n                            value=\"users\"\r\n                            className={classes.tabItem}\r\n                        />}\r\n\r\n                        <Tab\r\n                            label=\"Posts\"\r\n                            value=\"posts\"\r\n                            className={classes.tabItem}\r\n                        />\r\n                        {userCredential.role==='BusinessUser' && <Tab\r\n                            label=\"Products\"\r\n                            value=\"products\"\r\n                            className={classes.tabItem}\r\n                        />}\r\n\r\n                      </Tabs>\r\n                    </>\r\n                )}\r\n              </Typography>\r\n              {!name && (\r\n                  <>\r\n                    <Link to=\"/login\">\r\n                      <Button style={{ textTransform: 'none' }}>Login</Button>\r\n                    </Link>\r\n                    <Link to=\"/register\">\r\n                      <Button style={{ textTransform: 'none' }}>Register</Button>\r\n                    </Link>\r\n                  </>\r\n              )}\r\n              {name && (\r\n                  <>\r\n                    <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={this.handleMenu}\r\n                        color=\"inherit\"\r\n                    >\r\n                      <AccountCircle />\r\n                      {name}\r\n                    </IconButton>\r\n                    <Menu\r\n                        id=\"menu-appbar\"\r\n                        anchorEl={anchorEl}\r\n                        anchorOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'right',\r\n                        }}\r\n                        keepMounted\r\n                        transformOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'right',\r\n                        }}\r\n                        open={open}\r\n                        onClose={this.handleClose}\r\n                    >\r\n                      <MenuItem onClick={this.handleClose}>{email}</MenuItem>\r\n                      <Logout {...this.props}/>\r\n                    </Menu>\r\n                  </>\r\n              )}\r\n            </Toolbar>\r\n          </AppBar>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles as any)(NavBar)\r\n","export const {\r\n    NODE_ENV='development',\r\n    PAYPAL_CLIENT_ID='AToOrRCR3xwa1hs6T5MVv9m7Xi8XCKqvXVM8rVuP1GyUqlhEJ0XZZh6zCKo2pOlosTBV_HEaoj5yVm79',\r\n    PAYPAL_SECRET='ECImpB7zi52-92bVl8Jy6MtNpG6W7M3eJKXddsc6UtC_Swh-QyMd4Yx4flXabwYz6z6mawliOk5tr3HE',\r\n    REDIRECT_URL='http://50.17.184.113:3000/user/profile/',\r\n    PAYPAL_AUTH_URL='https://www.sandbox.paypal.com/signin/authorize',\r\n    PAYPAL_TOKEN_URL='https://api.sandbox.paypal.com/v1/oauth2/token',\r\n    PAYPAL_USER_URL='https://api.sandbox.paypal.com/v1/identity/oauth2/userinfo?schema=paypalv1.1',\r\n    PAYPAL_SCOPE='openid profile email address https://uri.paypal.com/services/paypalattributes',\r\n    BASE_API='http://50.17.184.113:4000',\r\n    REFRESH_TOKEN_LIFETIME='7d'\r\n}= process.env\r\n\r\nexport const PAYPAL_CREDENTIAL=btoa(`${PAYPAL_CLIENT_ID}:${PAYPAL_SECRET}`)\r\nexport const paypalConfigOption: any={\r\n    url: PAYPAL_AUTH_URL,\r\n    client_id: PAYPAL_CLIENT_ID,\r\n    scope: PAYPAL_SCOPE,\r\n    responseType: 'code',\r\n    redirect_uri: REDIRECT_URL\r\n}\r\n","import React, {Component} from 'react'\r\nimport {\r\n    withStyles,\r\n    WithStyles,\r\n    Button,\r\n} from '@material-ui/core'\r\nconst styles = (_theme: any) => ({\r\n    button: {\r\n        borderRadius: '50px'\r\n    }\r\n})\r\n\r\ninterface Props extends WithStyles{\r\n    url: string\r\n    client_id: string\r\n    scope: string\r\n    redirect_uri: string\r\n    response_type: string\r\n}\r\nclass PayPalAuthButton extends Component <Props> {\r\n\r\n    getConnected=()=>{\r\n        const {url, client_id, scope, redirect_uri, response_type}= this.props\r\n        const payPalLoginUrl=`${url}?scope=${scope}&response_type=${response_type}&redirect_uri=${redirect_uri}&client_id=${client_id}`\r\n        window.location.href=payPalLoginUrl\r\n    }\r\n\r\n    render(){\r\n        const {classes}= this.props\r\n        return (\r\n            <Button\r\n                onClick={this.getConnected}\r\n                className={classes.button}\r\n\r\n            >\r\n                <img alt='Connect with PayPal' className={classes.img} src='https://www.paypalobjects.com/webstatic/en_US/developer/docs/login/connectwithpaypalbutton.png'/>\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles as any)(PayPalAuthButton)\r\n","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { Alert } from '@material-ui/lab';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            '& > * + *': {\r\n                marginTop: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\nexport interface AppAlertProps {\r\n    alertType: 'error' | 'success'\r\n    message: string\r\n}\r\nconst AppAlert: React.FC<AppAlertProps> =(props:AppAlertProps) =>{\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Collapse in={open}>\r\n                <Alert variant=\"outlined\" severity={props.alertType}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setOpen(false);\r\n                            }}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {props.message}\r\n                </Alert>\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppAlert\r\n","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport {CardActionArea, FormLabel, CardActions, CardContent, CardMedia, Typography, Button } from '@material-ui/core';\r\nimport {useCreateCartMutation} from \"../../graphql\";\r\nimport {AppCredential, getAppCredential} from \"../../config/accessToken\";\r\nimport AppAlert from \"./AppAlert\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n    title:{\r\n        fontSize:20\r\n    },\r\n    button:{\r\n        float: 'right',\r\n        justifyItems:'flex-end'\r\n    }\r\n});\r\ninterface Props{\r\n    clientId?: string\r\n    title: string\r\n    description?: string\r\n    price?: number\r\n    imageUrl?: string\r\n    product?: any\r\n    checkout?: boolean\r\n    isVideo?: boolean\r\n}\r\ninterface MediaProps {\r\n    url: string, title: string, isVideo:boolean\r\n}\r\nconst RenderMedia:React.FC<MediaProps>=(props: MediaProps)=>{\r\n    const classes = useStyles();\r\n    const { url, title, isVideo}= props\r\n    return isVideo?(\r\n        <CardMedia\r\n            className={classes.media}\r\n            component='iframe'\r\n            title={title}\r\n            src={url}\r\n        />\r\n    ):(\r\n        <CardMedia\r\n            className={classes.media}\r\n            image={url}\r\n            title={title}\r\n        />\r\n    )\r\n}\r\ntype MessageType= 'success' | 'error'\r\nconst AppCard:React.FC<Props>=(props: Props)=> {\r\n    // @ts-ignore\r\n    let userCredential:AppCredential= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()): getAppCredential()\r\n    const [cartMutation] = useCreateCartMutation()\r\n    const classes = useStyles();\r\n    const {title, description, price, imageUrl=`https://via.placeholder.com/345x140.png?text=`, checkout=false, isVideo=false, product}= props\r\n    const [message, setMessage] = useState('')\r\n    const [messageType, setMessageType] = useState<MessageType>('success')\r\n    // const amount:number= price===undefined?0:price\r\n    // const paypalOptions:PaypalOptions = {\r\n    //     clientId: clientId,\r\n    //     intent: 'capture'\r\n    // }\r\n\r\n    const addToCart=async (product: any)=>{\r\n        console.log('product==addToCart====',product)\r\n        const {data} = await cartMutation({\r\n            variables:{\r\n                partnerId: product.partner.id,\r\n                customerId:userCredential.businessUserId,\r\n                productId: product.id,\r\n                name: product.name,\r\n                price: product.price,\r\n                description: product.description\r\n            }\r\n        })\r\n        if(data) {\r\n            setMessage('Added to cart')\r\n        }\r\n        else {\r\n            setMessage('Something error. Please try again.')\r\n            setMessageType('error')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <RenderMedia url={imageUrl} title={title} isVideo={isVideo}/>\r\n                <CardContent>\r\n                    {message &&\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                       <AppAlert message={message} alertType={messageType}/>\r\n                    </Typography>}\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        <FormLabel component=\"legend\"><span className={classes.title}>{title} </span></FormLabel>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                {price &&\r\n                <Button size=\"small\" color=\"primary\">\r\n                    <strong>{'$'+price.toString()}</strong>\r\n                </Button>}\r\n                {checkout &&\r\n                <Button size=\"small\" color=\"primary\" onClick={()=>addToCart(product)} style={{textDecoration: 'none'}}>\r\n                    Add to cart\r\n                </Button>\r\n                    // <PayPalCheckoutButton key={product.id} product={product} paypalOptions={paypalOptions} amount={amount}/>\r\n                }\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default AppCard\r\n","import React from 'react'\r\nimport { Button, CircularProgress } from '@material-ui/core'\r\nimport { withStyles, WithStyles } from '@material-ui/core'\r\n\r\nconst styles = (theme: any) => ({\r\n  app: {\r\n    flexGrow: 1,\r\n    itemAlign: 'center',\r\n    background: 'whitesmoke',\r\n    padding: '70px',\r\n    height: '100vh',\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n})\r\nconst Loading: React.FC<WithStyles> = props => {\r\n  const { classes } = props\r\n  const [progress, setProgress] = React.useState(0)\r\n\r\n  React.useEffect(() => {\r\n    function tick() {\r\n      // reset when reaching 100%\r\n      setProgress(oldProgress => (oldProgress >= 100 ? 0 : oldProgress + 1))\r\n    }\r\n\r\n    const timer = setInterval(tick, 20)\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n      <Button variant=\"text\" className={classes.button} disabled style={{ textTransform: 'none' }}>\r\n        <CircularProgress className={classes.circularProgress} value={progress} size={20}/>\r\n        Loading...\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles as any)(Loading)\r\n","import React from 'react'\r\nimport {FormLabel, Grid, withStyles, WithStyles} from '@material-ui/core'\r\nimport {RouteComponentProps} from 'react-router-dom';\r\nimport {AppCredential, getAppCredential} from \"../config/accessToken\";\r\nimport {paypalConfigOption} from \"../config/config\";\r\nimport PayPalAuthButton from \"./premitive/PayPalAuthButton\";\r\nimport AppCard from \"./premitive/AppCard\";\r\nimport {usePostsQuery, useProductsQuery} from \"../graphql\";\r\nimport Loading from \"./core/Loading\";\r\nconst styles = () => ({\r\n    app: {\r\n        flexGrow: 1,\r\n        itemAlign: 'center',\r\n        background: 'whitesmoke',\r\n        padding: '70px',\r\n        height: '100vh',\r\n    },\r\n    postTitle:{\r\n        borderBottom: '1px solid #c2c2c2',\r\n        marginBottom:' 10px',\r\n        fontWeight: 'bold'\r\n    }\r\n})\r\ntype Props= WithStyles & RouteComponentProps\r\nconst Home: React.FC<Props> = (props: any) => {\r\n    const { classes } = props\r\n    const postQuery: any = usePostsQuery({\r\n        fetchPolicy: 'network-only',\r\n    })\r\n    const productQuery: any = useProductsQuery({\r\n        fetchPolicy: 'network-only',\r\n    })\r\n\r\n    let products:any=[]\r\n    let posts:any=[]\r\n    let loading=false\r\n    if(postQuery.data) {\r\n        posts= postQuery.data.posts\r\n        loading= postQuery.loading\r\n    }\r\n    if(productQuery.data) {\r\n        products= productQuery.data.products\r\n        loading= productQuery.loading\r\n    }\r\n\r\n    // @ts-ignore\r\n    let userCredential: AppCredential= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()): getAppCredential()\r\n    const hasBusiness=(userCredential.role==='BusinessUser' && !userCredential.hasBusiness)\r\n    return (\r\n        <div className={classes.app}>\r\n            {loading && <Loading/>}\r\n            <Grid container spacing={8} alignItems=\"center\">\r\n                <Grid item xs>\r\n                    {hasBusiness &&\r\n                    <PayPalAuthButton {...paypalConfigOption}/>\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            {(!loading && products.length>0) &&\r\n            <>\r\n                <Grid container spacing={8} alignItems=\"center\" className={classes.postTitle}>\r\n                    <FormLabel component='h4'> Products </FormLabel>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"center\">\r\n                    {!loading && products.map((product: any) => {\r\n                        return (\r\n                            < Grid item xs={3} key={product.id}>\r\n                                <AppCard product={product} key={product.id} title={product.name} price={product.price} description={product.description} checkout/>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                    }\r\n                </Grid>\r\n            </>\r\n            }\r\n            {(!loading && posts.length>0) &&\r\n            <>\r\n                <Grid container spacing={8} alignItems=\"center\" className={classes.postTitle}>\r\n                    <FormLabel component='h4'> Text & Videos Post </FormLabel>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"center\">\r\n                    {posts.map((post: any) => {\r\n                        return (\r\n                            < Grid item xs={3} key={post.id}>\r\n                                <AppCard key={post.id} imageUrl={post.post} title={post.title} isVideo={post.postType==='video'} description={post.description}/>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                    }\r\n                </Grid>\r\n            </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles as any)(Home)\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport {\r\n  Paper,\r\n  withStyles,\r\n  WithStyles,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Radio,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  RadioGroup ,\r\n} from '@material-ui/core'\r\nimport { useRegisterMutation} from '../../graphql'\r\nimport {RouteComponentProps} from 'react-router-dom'\r\nconst styles = (theme: any) => ({\r\n  app: {\r\n    flexGrow: 1,\r\n    itemAlign: 'center',\r\n    background: 'whitesmoke',\r\n    padding: '70px',\r\n    height: '100vh',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit * 2,\r\n  },\r\n  padding: {\r\n    padding: theme.spacing.unit,\r\n    width: '50%',\r\n    margin: 'auto',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 20,\r\n  },\r\n  headerTitle: {\r\n    background: 'white',\r\n    boxShadow:\r\n        '0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)',\r\n    marginBottom: 10,\r\n  },\r\n  radioControl:{\r\n    margin: 0\r\n  }\r\n})\r\ntype Props = RouteComponentProps & WithStyles\r\ninterface RegisterState {\r\n  email: string\r\n  password: string\r\n  firstName: string\r\n  lastName: string\r\n  userType: string\r\n}\r\nconst Register: React.FC<Props> = ({classes, history}) => {\r\n  const [registerMutation] = useRegisterMutation()\r\n  const initialState: RegisterState = {\r\n    email: '',\r\n    password: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    userType: 'CustomerUser',\r\n  }\r\n  const [state, setState] = useState(initialState)\r\n  const setValue = (\r\n      event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const field = event.target.getAttribute('id') as string\r\n    const value = event.target.value as string\r\n    const data: RegisterState = { ...initialState }\r\n    let newState = Object.create(data)\r\n    newState[field] = value\r\n    setState({\r\n      ...state,\r\n      ...newState,\r\n    })\r\n  }\r\n\r\n  const submit = async () => {\r\n    await registerMutation({\r\n      variables: {\r\n        ...state,\r\n      },\r\n    })\r\n    history.push('/login?error=Please login to continue')\r\n  }\r\n  const setUserType=(event: React.ChangeEvent<HTMLInputElement>)=>{\r\n    setState({\r\n      ...state,\r\n      userType: event.target.value\r\n    })\r\n  }\r\n  return (\r\n      <div className={classes.app}>\r\n        <Grid container spacing={8}>\r\n          <Grid item xs>\r\n            <Paper className={classes.padding}>\r\n              <div className={classes.margin}>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                  <Grid item md={true} sm={true} xs={true}>\r\n                    <FormLabel component='h4'>Register as: </FormLabel>\r\n                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                      <FormControlLabel\r\n                          className={classes.radioControl}\r\n                          value=\"CustomerUser\"\r\n                          control={\r\n                            <Radio color=\"primary\" checked={state.userType === 'CustomerUser'} onChange={setUserType}/>\r\n                          }\r\n                          label=\"Customer User\"\r\n                          labelPlacement=\"start\"\r\n                      />\r\n                      <FormControlLabel\r\n                          className={classes.radioControl}\r\n                          value=\"BusinessUser\"\r\n                          control={<Radio color=\"primary\" checked={state.userType === 'BusinessUser'} onChange={setUserType}/>}\r\n                          label=\"Business User\"\r\n                          labelPlacement=\"end\"\r\n                      />\r\n\r\n                    </RadioGroup>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                  <Grid item md={true} sm={true} xs={true}>\r\n                    <TextField\r\n                        id=\"email\"\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        fullWidth\r\n                        autoFocus\r\n                        required\r\n                        variant=\"outlined\"\r\n                        onChange={setValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                  <Grid item md={true} sm={true} xs={true}>\r\n                    <TextField\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        fullWidth\r\n                        required\r\n                        variant=\"outlined\"\r\n                        onChange={setValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                  <Grid item md={true} sm={true} xs={true}>\r\n                    <TextField\r\n                        id=\"firstName\"\r\n                        label=\"First Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        required\r\n                        variant=\"outlined\"\r\n                        onChange={setValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                  <Grid item md={true} sm={true} xs={true}>\r\n                    <TextField\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        required\r\n                        variant=\"outlined\"\r\n                        onChange={setValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"flex-end\" style={{ marginTop: '10px' }}>\r\n                  <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      style={{ textTransform: 'none' }}\r\n                      onClick={submit}\r\n                  >\r\n                    Register\r\n                  </Button>\r\n                </Grid>\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles as any)(Register)\r\n","import React, {Component} from \"react\";\r\nimport MaterialTable from \"material-table\";\r\ninterface Props{\r\n    title: string\r\n    columns: any[],\r\n    data: any[],\r\n    onAdd: (newData: any) => Promise<any>;\r\n    onRowUpdate:(newData: any, oldData?: any) => Promise<any>;\r\n    onRowDelete:(oldData: any) => Promise<any>;\r\n}\r\nclass CustomTable extends Component<Props>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        const {title, columns, onAdd, onRowDelete, data} = this.props\r\n        return (\r\n            <MaterialTable\r\n                style={{ boxShadow: 'none' }}\r\n                title={title}\r\n                columns={columns}\r\n                data={data}\r\n                editable={{\r\n                    onRowAdd: onAdd,\r\n                    // onRowUpdate: onRowUpdate,\r\n                    onRowDelete: onRowDelete,\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomTable\r\n","import React, { useState } from 'react'\r\nimport { Paper, Grid, withStyles, WithStyles } from '@material-ui/core'\r\nimport {\r\n  useRegisterMutation,\r\n  useUsersQuery,\r\n} from '../../graphql'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport CustomTable from \"../premitive/CustomTable\";\r\n// import randomstring from 'randomstring'\r\nconst styles = (theme: any) => ({\r\n  app: {\r\n    flexGrow: 1,\r\n    itemAlign: 'center',\r\n    background: 'whitesmoke',\r\n    padding: '70px',\r\n    height: '100vh',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  padding: {\r\n    padding: theme.spacing.unit,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  table: {\r\n    boxShadow: 'none',\r\n  },\r\n})\r\nexport interface Users {\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  id: string\r\n  password: string\r\n}\r\ninterface Row {\r\n  users: Users[]\r\n}\r\nconst columns=[\r\n  { title: 'Name', field: 'firstName' },\r\n  { title: 'Surname', field: 'lastName' },\r\n  { title: 'Email', field: 'email' },\r\n]\r\ntype Props = RouteComponentProps<any> & WithStyles & Row\r\nconst Users: React.FC<Props> = props => {\r\n  let userList: Users[] = []\r\n  const { data }: any = useUsersQuery({\r\n    fetchPolicy: 'network-only',\r\n  })\r\n  if (data) {\r\n    userList = data?.users.map((user: Users) => {\r\n      return {\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        id: user.id,\r\n      }\r\n    })\r\n  }\r\n\r\n  const [getUsers, setUsers] = useState<Users[]>(userList)\r\n  const [registerMutation] = useRegisterMutation()\r\n\r\n  const onAdd = async (newData: Users) =>{\r\n    return new Promise(resolve => {\r\n      setTimeout(async () => {\r\n        // const _password = randomstring.generate(7);\r\n        await registerMutation({\r\n          variables: {\r\n            ...newData,\r\n            password: 'AdminUser',\r\n            userType: \"AdminUser\",\r\n          },\r\n        })\r\n        let users: Users[] = getUsers.length > 0 ? getUsers : userList\r\n        users.push(newData)\r\n        setUsers(users)\r\n        resolve(newData)\r\n      }, 1000)\r\n    })\r\n  }\r\n\r\n\r\n  const onRowUpdate = (_newData: Users, _oldData: any) =>\r\n    new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve()\r\n      }, 100)\r\n    })\r\n\r\n  const onRowDelete = (oldData: Users) =>\r\n    new Promise(resolve => {\r\n      setTimeout(() => {\r\n        const users: Users[] = getUsers.length > 0 ? getUsers : userList\r\n        const newData:Users[]= users.filter(data=>{\r\n          return data.email!==oldData.email\r\n        })\r\n        setUsers(newData)\r\n        resolve(oldData)\r\n      }, 1000)\r\n    })\r\n\r\n  const { classes } = props\r\n  const users: Users[] = getUsers.length > 0 ? getUsers : userList\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n      <Grid container spacing={8}>\r\n        <Grid item xs>\r\n          <Paper className={classes.paper}>\r\n            <CustomTable\r\n                title=\"Users\"\r\n                columns={columns}\r\n                data={users}\r\n                onAdd={onAdd}\r\n                onRowUpdate={onRowUpdate}\r\n                onRowDelete={onRowDelete}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles as any)(Users)\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { setAppCredential, AppCredential } from '../../config/accessToken'\r\nimport {\r\n  Paper,\r\n  withStyles,\r\n  WithStyles,\r\n  Grid,\r\n  TextField,\r\n  Button, FormLabel,\r\n} from '@material-ui/core'\r\nimport { useLoginMutation } from '../../graphql'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport queryString from \"query-string\";\r\nimport AppAlert from \"../premitive/AppAlert\";\r\nconst styles = (theme: any) => ({\r\n  app: {\r\n    flexGrow: 1,\r\n    itemAlign: 'center',\r\n    background: 'whitesmoke',\r\n    padding: '70px',\r\n    height: '100vh',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit * 2,\r\n  },\r\n  padding: {\r\n    padding: theme.spacing.unit,\r\n    width: '50%',\r\n    margin: 'auto',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 20,\r\n  },\r\n  headerTitle: {\r\n    background: 'white',\r\n    boxShadow:\r\n      '0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)',\r\n    marginBottom: 10,\r\n  },\r\n})\r\ntype Props = RouteComponentProps & WithStyles\r\ninterface RegisterState {\r\n  email: string\r\n  password: string\r\n  firstName: string\r\n  lastName: string\r\n}\r\nconst Login: React.FC<Props> = (props: Props) => {\r\n  const parsedData: any = queryString.parse(props.location.search);\r\n  const { classes, history }= props\r\n  const [loginMutation] = useLoginMutation()\r\n  const initialState: RegisterState = {\r\n    email: '',\r\n    password: '',\r\n    firstName: '',\r\n    lastName: '',\r\n  }\r\n  const [state, setState] = useState(initialState)\r\n  const setValue = (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const field = event.target.getAttribute('id') as string\r\n    const value = event.target.value as string\r\n    const data: RegisterState = { ...initialState }\r\n    let newState = Object.create(data)\r\n    newState[field] = value\r\n    setState({\r\n      ...state,\r\n      ...newState,\r\n    })\r\n  }\r\n\r\n  const submit = async () => {\r\n    const response = await loginMutation({\r\n      variables: {\r\n        ...state,\r\n      },\r\n    })\r\n    if (response && response.data) {\r\n      setAppCredential({\r\n        ...response.data.login,\r\n      } as AppCredential)\r\n      localStorage.setItem('user', JSON.stringify(response.data.login))\r\n    }\r\n    history.push('/')\r\n  }\r\n  return (\r\n    <div className={classes.app}>\r\n      <Grid container spacing={8}>\r\n        <Grid item xs>\r\n          <Paper className={classes.padding}>\r\n            <div className={classes.margin}>\r\n              <FormLabel component='h4'>Login </FormLabel>\r\n              <Grid container spacing={8} alignItems=\"flex-end\">\r\n                <Grid item md={true} sm={true} xs={true}>\r\n                  {parsedData.error && <AppAlert alertType='error' message={parsedData.error}/>}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={8} alignItems=\"flex-end\">\r\n                <Grid item md={true} sm={true} xs={true}>\r\n                  <TextField\r\n                    id=\"email\"\r\n                    label=\"Email\"\r\n                    type=\"email\"\r\n                    fullWidth\r\n                    autoFocus\r\n                    required\r\n                    variant=\"outlined\"\r\n                    onChange={setValue}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={8} alignItems=\"flex-end\">\r\n                <Grid item md={true} sm={true} xs={true}>\r\n                  <TextField\r\n                    id=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    fullWidth\r\n                    required\r\n                    variant=\"outlined\"\r\n                    onChange={setValue}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container justify=\"flex-end\" style={{ marginTop: '10px' }}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  style={{ textTransform: 'none' }}\r\n                  onClick={submit}\r\n                >\r\n                  Login\r\n                </Button>\r\n              </Grid>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles as any)(Login)\r\n","import React, {useState} from 'react'\r\nimport { Paper, Grid, withStyles, WithStyles } from '@material-ui/core'\r\nimport {\r\n    usePostsQuery, useCreatePostMutation\r\n} from '../../graphql'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport {getAppCredential} from \"../../config/accessToken\";\r\nimport Loading from '../core/Loading'\r\nimport CustomTable from \"../premitive/CustomTable\";\r\nconst styles = (theme: any) => ({\r\n    app: {\r\n        flexGrow: 1,\r\n        itemAlign: 'center',\r\n        background: 'whitesmoke',\r\n        padding: '70px',\r\n        height: '100vh',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit,\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    table: {\r\n        boxShadow: 'none',\r\n    },\r\n})\r\nexport interface Me {\r\n    name: string\r\n}\r\nexport interface PostType {\r\n    id: string\r\n    title: string\r\n    postType: string\r\n    description: string\r\n    createdAt: string\r\n    videoUrl: string\r\n    userName: string\r\n    user: Me\r\n}\r\ninterface Row {\r\n    posts: PostType[]\r\n}\r\n\r\nconst columns=[\r\n    { title: 'CreatedAt', field: 'createdAt', editable: 'never' },\r\n    { title: 'User', field: 'userName', editable: 'never' },\r\n    { title: 'PostType', field: 'postType', lookup: { 'text': 'Text','video': 'Video' }, initialEditValue:'text' },\r\n    { title: 'Title', field: 'title' },\r\n    { title: 'Description', field: 'description' },\r\n    { title: 'Video Url', field: 'videoUrl' },\r\n]\r\ntype Props = RouteComponentProps<any> & WithStyles & Row\r\nconst Posts: React.FC<Props> = (props) => {\r\n    const appCredential= getAppCredential()\r\n    let postList: PostType[] = []\r\n    const { data, loading }: any = usePostsQuery({\r\n        fetchPolicy: 'network-only',\r\n    })\r\n\r\n    if (!loading && data) {\r\n        data?.posts.map((post: PostType) => {\r\n            postList.push({\r\n                id: post.id,\r\n                title:  post.title,\r\n                postType:  post.postType,\r\n                description:  post.description,\r\n                createdAt:  post.createdAt,\r\n                videoUrl:  post.videoUrl,\r\n                userName:  post.user.name,\r\n            } as PostType)\r\n        })\r\n    }\r\n    const [getPosts, setPosts] = useState(postList)\r\n    const [postMutation] = useCreatePostMutation()\r\n\r\n    const onAdd = (newData: PostType) =>{\r\n        return new Promise(resolve => {\r\n            setTimeout(async () => {\r\n                const {postType=\"\",title=\"\",description=\"\",videoUrl=\"\"} = newData\r\n                const {data}=await postMutation({\r\n                    variables: {\r\n                        postType,title,description,videoUrl,\r\n                        userId: appCredential.id\r\n                    }\r\n                })\r\n                const {createPost}: any= data\r\n                const post= {\r\n                    id: createPost.id,\r\n                    title:  createPost.title,\r\n                    postType:  createPost.postType,\r\n                    description:  createPost.description,\r\n                    createdAt:  createPost.createdAt,\r\n                    videoUrl:  createPost.videoUrl,\r\n                    userName:  createPost.user.name,\r\n                } as PostType\r\n                const posts: PostType[] = getPosts.length>0? getPosts: postList\r\n                setPosts([...posts, ...[post]])\r\n                resolve(post)\r\n            }, 1500);\r\n        })\r\n    }\r\n\r\n\r\n    const onRowUpdate = (newData: PostType, oldData: any) =>\r\n        new Promise(resolve => {\r\n            resolve()\r\n            if (oldData) {\r\n                const posts: PostType[] = getPosts.length>0? getPosts: postList\r\n                posts[posts.indexOf(oldData)] = newData\r\n                setPosts(posts)\r\n            }\r\n        })\r\n\r\n    const onRowDelete = (oldData: PostType) =>{\r\n        return new Promise(resolve => {\r\n            const posts: PostType[] = getPosts.length>0? getPosts: postList\r\n            const newData:PostType[]= posts.filter(data=>{\r\n                return data.id!==oldData.id\r\n            })\r\n            setPosts(newData)\r\n            resolve(oldData)\r\n        })\r\n    }\r\n\r\n\r\n    const { classes } = props\r\n    const posts: PostType[] = getPosts.length>0? getPosts: postList\r\n    return (\r\n        <div className={classes.app}>\r\n            <Grid container spacing={8}>\r\n                <Grid item xs>\r\n                    <Paper className={classes.paper}>\r\n                        {/*<MaterialTable*/}\r\n                        {/*    style={{ boxShadow: 'none' }}*/}\r\n                        {/*    title='Post'*/}\r\n                        {/*    columns={columns}*/}\r\n                        {/*    data={getPosts.length>0? getPosts: postList}*/}\r\n                        {/*    editable={{*/}\r\n                        {/*        onRowAdd: onAdd,*/}\r\n                        {/*        onRowUpdate: onRowUpdate,*/}\r\n                        {/*        onRowDelete: onRowDelete,*/}\r\n                        {/*    }}*/}\r\n                        {/*/>*/}\r\n                        {loading && <Loading/>}\r\n                        {!loading && <CustomTable\r\n                            title=\"Posts\"\r\n                            columns={columns}\r\n                            data={posts}\r\n                            onAdd={onAdd}\r\n                            onRowUpdate={onRowUpdate}\r\n                            onRowDelete={onRowDelete}\r\n                        />}\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles as any)(Posts)\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport {\r\n  Paper,\r\n  withStyles,\r\n  WithStyles,\r\n  Grid,\r\n  TextField, Button, FormLabel,\r\n} from '@material-ui/core'\r\nimport {RouteComponentProps} from 'react-router-dom'\r\nimport queryString from 'query-string'\r\nimport qs from 'qs'\r\nimport axios, {AxiosRequestConfig} from 'axios'\r\nimport {PAYPAL_USER_URL, PAYPAL_CREDENTIAL, PAYPAL_TOKEN_URL} from \"../../config/config\";\r\nimport {AppCredential, getAppCredential, setAppCredential} from \"../../config/accessToken\";\r\nimport {\r\n  useCreatePartnerMutation,\r\n  useCustomerDetailQuery,\r\n  usePartnerDetailQuery\r\n} from \"../../graphql\";\r\nimport AppAlert, {AppAlertProps} from \"../premitive/AppAlert\";\r\n\r\n\r\nconst styles = (theme: any) => ({\r\n  app: {\r\n    flexGrow: 1,\r\n    itemAlign: 'center',\r\n    background: 'whitesmoke',\r\n    padding: '70px',\r\n    height: '100vh',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit * 2,\r\n  },\r\n  padding: {\r\n    padding: theme.spacing.unit,\r\n    width: '50%',\r\n    margin: 'auto',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 20,\r\n  },\r\n  headerTitle: {\r\n    background: 'white',\r\n    boxShadow:\r\n        '0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)',\r\n    marginBottom: 10,\r\n  },\r\n})\r\ntype Props = RouteComponentProps & WithStyles\r\ninterface RegisterState {\r\n  userId: string\r\n  name: string\r\n  emails: string\r\n  partnerId: string\r\n  payerId: string\r\n  clientId: string\r\n  verifiedAccount: string\r\n}\r\n\r\n// @ts-ignore\r\nconst getToken:AppCredential= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()):  getAppCredential()\r\n\r\nexport const UserInfo:React.FC=()=>{\r\n  return (\r\n      <>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Name: {getToken.name}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Email: {getToken.email}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            User Role: {getToken.role}\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n  )\r\n}\r\nexport const CustomerProfile:React.FC=()=>{\r\n  const {data} = useCustomerDetailQuery({\r\n    variables: {\r\n      id: getToken.businessUserId\r\n    },\r\n    fetchPolicy: 'network-only',\r\n  })\r\n  let customer\r\n  if(data) customer= data.customer\r\n  return customer ? (\r\n      <>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Name: {customer.name}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Email: {customer.user.email}\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n  ):(<></>)\r\n}\r\nexport const BusinessProfile:React.FC=()=>{\r\n  const {data} = usePartnerDetailQuery({\r\n    variables: {\r\n      id: getToken.businessUserId\r\n    },\r\n    fetchPolicy: 'network-only',\r\n  })\r\n  let partner\r\n  if(data) partner= data.partner\r\n  return partner ? (\r\n      <>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Business Name: {partner.name}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Personal Email: {partner.user.email}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            Business Emails: {partner.emails}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={8} alignItems=\"flex-end\">\r\n          <Grid item md={true} sm={true} xs={true} component='h4'>\r\n            PayPal Verified: {partner.verifiedAccount==='true'?'Verified':'Not verified'}\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </>\r\n  ):(<></>)\r\n}\r\n\r\nconst UserProfile: React.FC<Props> = (props: Props) => {\r\n  const [partnerMutation] = useCreatePartnerMutation()\r\n\r\n  const initialState: RegisterState = {\r\n    userId: '',\r\n    name: '',\r\n    emails: '',\r\n    partnerId: '',\r\n    payerId: '',\r\n    clientId: '',\r\n    verifiedAccount:'',\r\n  }\r\n  const initialAlert:AppAlertProps={\r\n    message:'',\r\n    alertType:'success'\r\n  }\r\n\r\n  const [state, setState] = useState(initialState)\r\n  const [alertMessage, setAlertMessage] = useState(initialAlert)\r\n  const setValue = (\r\n      event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const value = event.target.value as string\r\n    setState({\r\n      ...state,\r\n      clientId: value,\r\n    })\r\n  }\r\n\r\n  const {classes}= props\r\n  const parsedData: any = queryString.parse(props.location.search);\r\n  const {code}= parsedData\r\n  const reqData = {\r\n    \"grant_type\": 'authorization_code',\r\n    \"code\": code\r\n  };\r\n  const options:AxiosRequestConfig = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Basic ${PAYPAL_CREDENTIAL}`\r\n    },\r\n    data: qs.stringify(reqData),\r\n    url: PAYPAL_TOKEN_URL,\r\n  };\r\n\r\n  const submit = async () => {\r\n    if(!state.clientId){\r\n      setAlertMessage({\r\n        alertType: 'error',\r\n        message: 'Please enter PayPal clientID.',\r\n      })\r\n    }else{\r\n      const getAccessToken= await axios(options)\r\n      const userOptions:AxiosRequestConfig = {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer  ${getAccessToken.data.access_token}`\r\n        },\r\n        url:PAYPAL_USER_URL,\r\n      };\r\n\r\n      const getUserData= await axios(userOptions)\r\n      const data: any= getUserData.data\r\n      let email=''\r\n      const {user_id,name, payer_id, verified_account, emails}= data\r\n      // const {street_address, locality, region, postal_code, country}= address\r\n      emails.map((e: any)=>{\r\n        email= email.concat(','+e.value)\r\n      })\r\n      const userData={\r\n        ...state,\r\n        userId:getToken.id,\r\n        name:name,\r\n        emails: email,\r\n        partnerId: user_id,\r\n        payerId: payer_id,\r\n        verifiedAccount:verified_account,\r\n      } as RegisterState\r\n\r\n      const response=await partnerMutation({\r\n        variables: {\r\n          ...userData,\r\n        },\r\n      })\r\n      const {createPartner}: any= response.data\r\n      const newCredential={\r\n        ...getToken,\r\n        hasBusiness: true,\r\n        businessUserId: createPartner.id\r\n      }\r\n      setAppCredential({\r\n        ...newCredential,\r\n      } as AppCredential)\r\n      localStorage.setItem('user', JSON.stringify(newCredential))\r\n      setAlertMessage({\r\n        alertType: 'success',\r\n        message: 'Your business profile has been updated..',\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n  return (\r\n      <div className={classes.app}>\r\n        <Grid container spacing={8}>\r\n          <Grid item xs>\r\n            <Paper className={classes.padding}>\r\n              <div className={classes.margin}>\r\n                <FormLabel component='h4'>User Profile</FormLabel>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                  <Grid item md={true} sm={true} xs={true}>\r\n                    {alertMessage.message && <AppAlert {...alertMessage}/>}\r\n                  </Grid>\r\n                </Grid>\r\n                {getToken.businessUserId && getToken.role==='BusinessUser' &&\r\n                <BusinessProfile/>\r\n                }\r\n                {getToken.businessUserId && getToken.role==='CustomerUser' &&\r\n                <CustomerProfile/>\r\n                }\r\n                {getToken.role==='AdminUser' &&\r\n                <UserInfo/>\r\n                }\r\n                {getToken.role==='CustomerUser' && getToken.businessUserId==='' &&\r\n                <UserInfo/>\r\n                }\r\n                {getToken.businessUserId==='' && getToken.role==='BusinessUser' &&\r\n                <>\r\n                  <Grid container spacing={8} alignItems=\"flex-end\">\r\n                    <Grid item md={true} sm={true} xs={true}>\r\n                      <TextField\r\n                          id=\"clientId\"\r\n                          label=\"ClientID\"\r\n                          type=\"text\"\r\n                          fullWidth\r\n                          required\r\n                          variant=\"outlined\"\r\n                          onChange={setValue}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container justify=\"flex-end\" style={{ marginTop: '10px' }}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        style={{ textTransform: 'none' }}\r\n                        onClick={submit}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Grid>\r\n                </>\r\n                }\r\n\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default withStyles(styles as any)(UserProfile)\r\n","import React, {Component} from 'react'\r\nimport { Grid, withStyles, WithStyles } from '@material-ui/core'\r\nimport AppAlert from \"./AppAlert\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport * as queryString from \"query-string\";\r\nconst styles = () => ({\r\n    app: {\r\n        flexGrow: 1,\r\n        itemAlign: 'center',\r\n        background: 'whitesmoke',\r\n        padding: '70px',\r\n        height: '100vh',\r\n    },\r\n    error:{\r\n        color: 'red'\r\n    }\r\n})\r\n\r\ntype Props = WithStyles & RouteComponentProps\r\n\r\nclass ErrorPage extends Component<Props>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        console.log(\"==============\", this.props)\r\n    }\r\n    render(){\r\n        const {classes, location}= this.props\r\n        const parsedData: any = queryString.parse(location.search);\r\n        const errorMessage= parsedData.errorMessage\r\n        console.log(\"parsedData====\",parsedData)\r\n        console.log(\"location====\",location)\r\n        console.log(\"errorMessage====\",errorMessage)\r\n        return (\r\n            <div className={classes.app}>\r\n                <Grid container spacing={8} alignItems=\"center\">\r\n                    <Grid item xs>\r\n                        <AppAlert message={errorMessage} alertType='error'/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ErrorPage)\r\n","import React, {useState} from 'react'\r\nimport { Paper, Grid, withStyles, WithStyles } from '@material-ui/core'\r\nimport {\r\n    useCreateProductMutation, useProductsQuery\r\n} from '../../graphql'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport {getAppCredential} from \"../../config/accessToken\";\r\nimport Loading from '../core/Loading'\r\nimport CustomTable from \"../premitive/CustomTable\";\r\nconst styles = (theme: any) => ({\r\n    app: {\r\n        flexGrow: 1,\r\n        itemAlign: 'center',\r\n        background: 'whitesmoke',\r\n        padding: '70px',\r\n        height: '100vh',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit,\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    table: {\r\n        boxShadow: 'none',\r\n    },\r\n})\r\nexport interface Partner {\r\n    id: string\r\n    name: string\r\n    clientId: string\r\n}\r\nexport interface ProductType {\r\n    id: string\r\n    name: string\r\n    price: number\r\n    description: string\r\n    createdAt: string\r\n    businessName: string\r\n    partner: Partner\r\n}\r\ninterface Row {\r\n    products: ProductType[]\r\n}\r\n\r\n\r\nconst columns=[\r\n    { title: 'CreatedAt', field: 'createdAt', editable: 'never' },\r\n    { title: 'Business Name', field: 'businessName', editable: 'never' },\r\n    { title: 'Name', field: 'name' },\r\n    { title: 'Description', field: 'description' },\r\n    { title: 'Price', field: 'price', type: 'numeric' },\r\n]\r\ntype Props = RouteComponentProps<any> & WithStyles & Row\r\nconst Products: React.FC<Props> = (props) => {\r\n    const appCredential= getAppCredential()\r\n    let productList: ProductType[] = []\r\n    const { data, loading }: any = useProductsQuery({\r\n        fetchPolicy: 'network-only',\r\n    })\r\n    if (!loading && data) {\r\n        data?.products.map((product: ProductType) => {\r\n            productList.push({\r\n                id: product.id,\r\n                name:  product.name,\r\n                price:  product.price,\r\n                description:  product.description,\r\n                createdAt:  product.createdAt,\r\n                businessName:  product.partner.name,\r\n                partner:{\r\n                    id:product.partner.id,\r\n                    clientId:product.partner.clientId,\r\n                    name:product.partner.name\r\n                },\r\n            } as ProductType)\r\n        })\r\n    }\r\n    const [getProducts, setProducts] = useState(productList)\r\n    const [productMutation] = useCreateProductMutation()\r\n\r\n    const onAdd = (newData: ProductType) =>{\r\n        return new Promise(resolve => {\r\n            setTimeout(async () => {\r\n                const {name=\"\",price=\"\",description=\"\"} = newData\r\n                const {data}=await productMutation({\r\n                    variables: {\r\n                        name,price: parseFloat(price.toString()),description,\r\n                        partnerId: appCredential.businessUserId\r\n                    }\r\n                })\r\n                const {createProduct}: any= data\r\n                const product= {\r\n                    id: createProduct.id,\r\n                    name:  createProduct.name,\r\n                    price:  createProduct.price,\r\n                    description:  createProduct.description,\r\n                    createdAt:  createProduct.createdAt,\r\n                    businessName:  createProduct.createdAt,\r\n                    partner:{\r\n                        id:createProduct.partner.id,\r\n                        clientId:createProduct.partner.name,\r\n                        name:createProduct.partner.name\r\n                    },\r\n                } as ProductType\r\n                const products: ProductType[] = getProducts.length>0? getProducts: productList\r\n                setProducts([...products, ...[product]])\r\n                resolve(product)\r\n            }, 1500);\r\n        })\r\n    }\r\n\r\n\r\n    const onRowUpdate = (newData: ProductType, oldData: any) =>\r\n        new Promise(resolve => {\r\n            resolve()\r\n            if (oldData) {\r\n                const products: ProductType[] = getProducts.length>0? getProducts: productList\r\n                products[products.indexOf(oldData)] = newData\r\n                setProducts(products)\r\n            }\r\n        })\r\n\r\n    const onRowDelete = (oldData: ProductType) =>{\r\n        return new Promise(resolve => {\r\n            const products: ProductType[] = getProducts.length>0? getProducts: productList\r\n            const newData:ProductType[]= products.filter(data=>{\r\n                return data.id!==oldData.id\r\n            })\r\n            setProducts(newData)\r\n            resolve(oldData)\r\n        })\r\n    }\r\n\r\n\r\n    const { classes } = props\r\n    const products: ProductType[] = getProducts.length>0? getProducts: productList\r\n    return (\r\n        <div className={classes.app}>\r\n            <Grid container spacing={8}>\r\n                <Grid item xs>\r\n                    <Paper className={classes.paper}>\r\n                        {loading && <Loading/>}\r\n                        {!loading && <CustomTable\r\n                            title=\"Products\"\r\n                            columns={columns}\r\n                            data={products}\r\n                            onAdd={onAdd}\r\n                            onRowUpdate={onRowUpdate}\r\n                            onRowDelete={onRowDelete}\r\n                        />}\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles as any)(Products)\r\n","import {\r\n    ButtonStylingOptions, OnApproveData,\r\n    OnCancelData,\r\n    OnCaptureData,\r\n    PayPalButton,\r\n    PayPalButtonProps,\r\n    PaypalOptions\r\n} from 'react-paypal-button'\r\nimport React from \"react\";\r\n\r\ninterface Props extends PayPalButtonProps{\r\n    amount: number\r\n    paypalOptions:PaypalOptions\r\n}\r\nconst PayPalCheckoutButton:React.FC<Props>=(props: Props)=>{\r\n    const { amount, paypalOptions}= props\r\n\r\n    const buttonStyles: ButtonStylingOptions = {\r\n        layout: 'horizontal',\r\n        shape: 'rect',\r\n        label: 'pay'\r\n    }\r\n    const onApprove=(_data: OnApproveData, _authId: string)=>{\r\n\r\n    }\r\n\r\n    const onPaymentStart= () => {\r\n        console.log(\"Payment started====\")\r\n    }\r\n    const onPaymentSuccess= (_response: OnCaptureData) => {\r\n        // @ts-ignore\r\n        // const user: AppCredential=localStorage.getItem('user')?JSON.parse(localStorage.getItem('user')):getAppCredential()\r\n        // const {create_time, status} = response\r\n        // console.log(\"onPaymentSuccess====\", _response)\r\n        // products.map(async (product)=>{\r\n        //     await orderMutation({\r\n        //         variables:{\r\n        //             productId: product.id,\r\n        //             customerId:user.businessUserId,\r\n        //             name: product.name,\r\n        //             price: product.price,\r\n        //             description:`Payment ${status} at ${create_time}`,\r\n        //             partnerId:product.partner.id,\r\n        //         }\r\n        //     })\r\n        // })\r\n    }\r\n    const onPaymentError = (msg: string) => {\r\n        alert(msg)\r\n    }\r\n    const onPaymentCancel=(_data: OnCancelData) =>{\r\n\r\n    }\r\n\r\n    return (\r\n        <PayPalButton\r\n            paypalOptions={paypalOptions}\r\n            buttonStyles={buttonStyles}\r\n            onApprove={onApprove}\r\n            onPaymentStart={onPaymentStart}\r\n            onPaymentSuccess={onPaymentSuccess}\r\n            onPaymentError={onPaymentError}\r\n            onPaymentCancel={onPaymentCancel}\r\n            amount={amount}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PayPalCheckoutButton\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PayPalCheckoutButton from \"./PayPalCheckoutButton\";\r\nimport { PAYPAL_CLIENT_ID } from '../../config/config';\r\nimport {PaypalOptions} from \"react-paypal-button\";\r\n\r\n\r\ninterface Props{\r\n    rows: any[]\r\n}\r\nconst CustomSelectedTable: React.FC<Props>=(props: Props)=> {\r\n    const {rows}= props\r\n    let {clientId=PAYPAL_CLIENT_ID}= rows[0].partner\r\n    const paypalOptions:PaypalOptions = {\r\n        clientId: clientId,\r\n        intent: 'capture'\r\n    }\r\n\r\n    let total= 0\r\n    rows.map(cart=>{\r\n        total+=cart.price\r\n    })\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"medium\" aria-label=\"a dense table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell>Description</TableCell>\r\n                        <TableCell align=\"right\">Price</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row, i: number) => (\r\n                        <TableRow key={i}>\r\n                            <TableCell>{row.name}</TableCell>\r\n                            <TableCell>{row.description}</TableCell>\r\n                            <TableCell align=\"right\">{row.price}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                    <TableRow key='totalRow'>\r\n                        <TableCell colSpan={2}>Total Price</TableCell>\r\n                        <TableCell align=\"right\">{total}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key='totalRow'>\r\n                        <TableCell colSpan={3} align=\"right\"><PayPalCheckoutButton amount={total} paypalOptions={paypalOptions}/></TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default CustomSelectedTable\r\n","import React from \"react\";\r\nimport {useCartsQuery} from \"../../graphql\";\r\nimport {Grid, Paper, WithStyles, withStyles} from \"@material-ui/core\";\r\nimport {AppCredential, getAppCredential} from \"../../config/accessToken\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport Loading from \"../core/Loading\";\r\nimport CustomSelectedTable from \"../premitive/CustomSelectedTable\";\r\n// import {PAYPAL_CLIENT_ID} from \"../../config/config\";\r\n// import {PaypalOptions} from \"react-paypal-button\";\r\n\r\nconst styles = (theme: any) => ({\r\n    app: {\r\n        flexGrow: 1,\r\n        itemAlign: 'center',\r\n        background: 'whitesmoke',\r\n        padding: '70px',\r\n        height: '100vh',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit,\r\n        width: '50%',\r\n        margin: 'auto',\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit,\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n    },\r\n    headerTitle: {\r\n        background: 'white',\r\n        boxShadow:\r\n            '0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)',\r\n        marginBottom: 10,\r\n    },\r\n})\r\ntype Props = RouteComponentProps & WithStyles\r\nconst MyCarts:React.FC<Props>=(props: Props)=>{\r\n    // @ts-ignore\r\n    const getToken:AppCredential= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()):  getAppCredential()\r\n\r\n    const {data, loading} = useCartsQuery({\r\n        variables: {\r\n            customerId: getToken.businessUserId\r\n        },\r\n        fetchPolicy: 'network-only',\r\n    })\r\n    const {classes}=props\r\n    return data ? (\r\n        <div className={classes.app}>\r\n            <Grid container spacing={8}>\r\n                <Grid item xs>\r\n                    {loading && <Loading/>}\r\n                    <Paper className={classes.padding}>\r\n                        <div className={classes.margin}>\r\n                            <Grid container spacing={8} alignItems=\"flex-end\">\r\n                                {(!loading && data.carts.length>0) && <CustomSelectedTable rows={data.carts}/>}\r\n                                {(!loading && data.carts.length===0) && <Grid item style={{padding: 50}}>No data available.</Grid>}\r\n                            </Grid>\r\n                            <Grid container spacing={8} alignItems=\"flex-end\">\r\n\r\n                            </Grid>\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    ):(<></>)\r\n}\r\n\r\nexport default withStyles(styles as any)(MyCarts)\r\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './Home'\nimport Register from './user/Register'\nimport User from './user/Users'\nimport Login from './user/Login'\nimport Posts from \"./post/Posts\";\nimport UserProfile from \"./user/UserProfile\";\nimport ErrorPage from \"./premitive/ErrorPage\";\nimport Products from \"./products/Products\";\nimport MyCarts from \"./carts/MyCarts\";\n\nexport const Routes: React.FC = () => {\n    return (\n        <>\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/register\" component={Register} />\n                <Route exact path=\"/users\" component={User} />\n                <Route exact path=\"/posts\" component={Posts} />\n                <Route exact path=\"/products\" component={Products} />\n                <Route exact path=\"/my-carts\" component={MyCarts} />\n                <Route exact path=\"/user/profile\" component={UserProfile} />\n                <Route exact path=\"/error\" component={ErrorPage} />\n            </Switch>\n        </>\n    )\n}\n","import React, { useEffect } from 'react'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport NavBar from './core/nav-bar'\r\nimport { Routes } from './Routes'\r\nimport { setAppCredential } from '../config/accessToken'\r\nconst App: React.FC = () => {\r\n  useEffect(() => {\r\n      if(localStorage.getItem('user')){\r\n          // @ts-ignore\r\n          let userCredential= JSON.parse(localStorage.getItem('user').toString())\r\n          setAppCredential(userCredential)\r\n      }\r\n\r\n  }, [])\r\nconsole.log(\"env=====\", process.env.BASE_API)\r\n  return (\r\n    <BrowserRouter>\r\n      <Route path=\"/\" render={props => <NavBar {...props} />} />\r\n      <Routes />\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import red from '@material-ui/core/colors/red';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#556cd6',\r\n    },\r\n    secondary: {\r\n      main: '#fff',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport App from './components/App'\nimport theme from './components/core'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport {\n  getAppCredential,\n  setAppCredential,\n} from './config/accessToken'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink, Observable } from 'apollo-link'\nimport { TokenRefreshLink } from 'apollo-link-token-refresh'\nimport jwtDecode from 'jwt-decode'\nimport { BASE_API } from './config/config'\nimport * as dotenv from 'dotenv'\ndotenv.config()\nconst cache = new InMemoryCache({})\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle: any\n      Promise.resolve(operation)\n        .then(operation => {\n          // @ts-ignore\n          let userCredential= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()):  getAppCredential()\n          if (userCredential.accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `bearer ${userCredential.accessToken}`,\n              },\n            })\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          })\n        })\n        .catch(observer.error.bind(observer))\n\n      return () => {\n        if (handle) handle.unsubscribe()\n      }\n    })\n)\nconst $appRoot=document.querySelector('#root')\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n      accessTokenField: 'accessToken',\n      isTokenValidOrUndefined: () => {\n        // @ts-ignore\n        let token= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()):  getAppCredential()\n        if (!token.accessToken) {\n          localStorage.removeItem('user')\n          return true\n        }\n        try {\n          const { exp } = jwtDecode(token.accessToken)\n          if (Date.now() >= exp * 1000) {\n            return false\n          } else {\n            return true\n          }\n        } catch {\n          return false\n        }\n      },\n      fetchAccessToken: () => {\n        return fetch(`${BASE_API}/refresh_token`, {\n          method: 'POST',\n          credentials: 'include',\n        })\n      },\n      handleFetch: accessToken => {\n        // @ts-ignore\n        let getToken= localStorage.getItem('user')?JSON.parse(localStorage.getItem('user').toString()):  getAppCredential()\n        setAppCredential({\n          ...getToken,\n          accessToken: accessToken,\n        })\n      },\n      handleError: err => {\n        console.warn('Your refresh token is invalid. Try to again')\n        console.error(\"err====\",err)\n        setAppCredential({\n          id: '',\n          accessToken: '',\n          email: '',\n          role: '',\n          name: '',\n          businessUserId: '',\n          hasBusiness: false,\n        })\n        localStorage.removeItem('user')\n      },\n    }),\n    onError((errors) => {\n      const {graphQLErrors, networkError}= errors\n      console.log(graphQLErrors)\n      console.log(networkError)\n      let message=''\n      let path\n      if(graphQLErrors!==undefined) {\n        message= graphQLErrors[0].message\n        // @ts-ignore\n        if(graphQLErrors[0].path.length>0)path=graphQLErrors[0].path[0]\n      }\n      if(networkError!==undefined) message= \"Network Error! Please try again\"\n      console.log(message)\n      console.log(path)\n      let redirectUrl='/'\n      if (path==='login') {\n        localStorage.removeItem('user')\n          redirectUrl=`/login/?error=${message}`\n      }else if(message==='Not authorized!'){\n        localStorage.removeItem('user')\n        redirectUrl=`/login/?error=${message} Please login to continue`\n      }else{\n        redirectUrl=`/error/?errorMessage=${message}`\n      }\n      window.location.href=redirectUrl\n    }),\n    requestLink,\n    new HttpLink({\n      uri: `${BASE_API}/graphql`,\n      credentials: 'include',\n    }),\n  ]),\n  cache,\n})\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </ThemeProvider>,\n    $appRoot\n)\n"],"sourceRoot":""}